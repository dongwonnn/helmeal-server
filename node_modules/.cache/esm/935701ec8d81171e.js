let Joi,User;_8d8‍.x([["register",()=>register],["login",()=>login],["check",()=>check],["logout",()=>logout]]);_8d8‍.w("@hapi/joi",[["default",["Joi"],function(v){Joi=v}]]);_8d8‍.w("../../models/user",[["default",["User"],function(v){User=v}]]);


       const register = async (ctx) => {
  // requset body 검증
  const schema = Joi.object().keys({
    username: Joi.string().alphanum().min(3).max(20).required(),
    password: Joi.string().required(),
  });

  const result = schema.validate(ctx.request.body);
  if (result.error) {
    ctx.status = 400;
    ctx.body = result.error;
    return;
  }

  const { username, password } = ctx.request.body;
  try {
    // 이름 겹치는 지 확인. 스태틱 메서드
    const exists = await User.findByUsername(username);
    if (exists) {
      ctx.status = 409;
      return;
    }

    const user = new User({
      username,
    });
    // 인스턴스 메서드
    await user.setPassword(password);
    await user.save();

    // hashedpassword 필드 제거
    ctx.body = user.serialize();

    const token = user.generateToken();
    ctx.cookies.set('access_token', token, {
      maxAge: 1000 * 60 * 60 * 24 * 7,
      httpOnly: true,
    });
  } catch (e) {
    ctx.throw(500, e);
  }
};

       const login = async (ctx) => {
  const { username, password } = ctx.request.body;

  if (!username || !password) {
    ctx.status = 401;
    return;
  }

  try {
    const user = await User.findByUsername(username);

    // 계정 존재하는 지?
    if (!user) {
      ctx.status = 401;
      return;
    }

    const valid = await user.checkPassword(password);
    if (!valid) {
      ctx.status = 401;
      return;
    }

    ctx.body = user.serialize();

    const token = user.generateToken();
    ctx.cookies.set('access_token', token, {
      maxAge: 1000 * 60 * 60 * 24 * 7,
      httpOnly: true,
    });
  } catch (e) {
    ctx.throw(500, e);
  }
};
       const check = async (ctx) => {
  const { user } = ctx.state;
  if (!user) {
    ctx.status = 401;
    return;
  }
  ctx.body = user;
};

// 로그아웃. 쿠키 지우기
       const logout = async (ctx) => {
  ctx.cookies.set('access_token');
  ctx.status = 204;
};
