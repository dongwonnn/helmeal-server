let Meal,Joi;_42c‍.x([["mealRegister",()=>mealRegister],["mealList",()=>mealList]]);_42c‍.w("../../models/meal",[["default",["Meal"],function(v){Meal=v}]]);_42c‍.w("@hapi/joi",[["default",["Joi"],function(v){Joi=v}]]);


       const mealRegister = async (ctx) => {
  // const schema = Joi.object().keys({
  //   id: Joi.string().required(),
  //   title: Joi.string().required(),
  //   protein: Joi.number().required(),
  //   carb: Joi.number().required(),
  //   fat: Joi.number().required(),
  //   cal: Joi.number().required(),
  //   integrity: Joi.string().required(),
  //   proteinImgUrl: Joi.string().required(),
  //   largeImgUrl: Joi.string().required(),
  //   smallImgUrl: Joi.string().required(),
  // });

  // const result = schema.validate(ctx.request);
  // if (result.error) {
  //   ctx.status = 400;
  //   ctx.body = result.error;
  //   console.log('너임?');
  //   return;
  // }

  const {
    id,
    title,
    protein,
    carb,
    fat,
    cal,
    integrity,
    proteinImgUrl,
    largeImgUrl,
    smallImgUrl,
  } = ctx.request.body;

  const meal = new Meal({
    id,
    title,
    protein,
    carb,
    fat,
    cal,
    integrity,
    proteinImgUrl,
    largeImgUrl,
    smallImgUrl,
  });
  try {
    await meal.save();
    ctx.body = meal;
  } catch (e) {
    ctx.throw(500, e);
  }
};

       const mealList = async (ctx) => {
  try {
    const meals = await Meal.find().exec();
    ctx.body = meals;
  } catch (e) {
    ctx.throw(500, e);
  }
};
