let mongoose,Schema,bcrypt,jwt;_452‍.x([["default",()=>_452‍.o]]);_452‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}],["Schema",["Schema"],function(v){Schema=v}]]);_452‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_452‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);



const UserSchema = new Schema({
  username: String,
  hashedPassword: String,
});

// 인스턴스 함수에서 this는 문서 인스턴스
UserSchema.methods.setPassword = async function (password) {
  const hash = await bcrypt.hash(password, 10);
  this.hashedPassword = hash;
};

UserSchema.methods.checkPassword = async function (password) {
  const result = await bcrypt.compare(password, this.hashedPassword);
  return result;
};

// 스태틱에서 this는 User
UserSchema.statics.findByUsername = function (username) {
  return this.findOne({ username });
};

// hasedmethod 지우기
UserSchema.methods.serialize = function () {
  const data = this.toJSON();
  delete data.hashedPassword;
  return data;
};

UserSchema.methods.generateToken = function () {
  const token = jwt.sign(
    {
      _id: this.id,
      username: this.username,
    },
    process.env.JWT_SECRET,
    {
      //토큰 유효기간
      expiresIn: '7d',
    },
  );

  return token;
};

const User = mongoose.model('User', UserSchema);
_452‍.d(User);
